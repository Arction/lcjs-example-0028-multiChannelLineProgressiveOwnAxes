(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,n)=>{const a=n(809),s=n(27),i=new Array(10).fill(0).map(((e,t)=>({title:`Ch ${t+1}`}))),{lightningChart:o,AutoCursorModes:r,emptyLine:l,AxisTickStrategies:c,AxisScrollStrategies:h,synchronizeAxisIntervals:g,UIOrigins:d,UIDraggingModes:u,translatePoint:m,LegendBoxBuilders:M,Themes:S}=a,{createProgressiveFunctionGenerator:f}=s,x=o().Dashboard({numberOfColumns:1,numberOfRows:i.length}).setSplitterStyle(l),p=i.map(((e,t)=>{const n=x.createChartXY({columnIndex:0,rowIndex:t}).setTitle("").setPadding({top:0,bottom:0}).setAutoCursorMode(r.disabled).setBackgroundStrokeStyle(l).setMouseInteractions(!1),a=n.getDefaultAxisX().setTickStrategy(c.Empty).setStrokeStyle(l).setScrollStrategy(h.progressive).setInterval(0,10,!1,!0),s=n.getDefaultAxisY().setTickStrategy(c.Empty).setStrokeStyle(l).setTitle(e.title).setTitleRotation(0).setThickness(60),i=n.addLineSeries({dataPattern:{pattern:"ProgressiveX"},automaticColorIndex:t}).setName(`Channel ${t+1}`).setDataCleaning({minDataPointCount:1e4});return{chart:n,series:i,axisX:a,axisY:s}})),I=p[0],y=p[p.length-1];I.chart.setTitle("Multi-channel real-time monitoring (10 chs, 1000 Hz)").setPadding({top:8});const P=y.axisX.setTickStrategy(c.Time,(e=>e.setMajorTickStyle((e=>e.setGridStrokeStyle(l))).setMinorTickStyle((e=>e.setGridStrokeStyle(l)))));g(P,...p.map((e=>e.axisX)).filter((e=>e!==P))),P.setInterval(-3e4,0);const k=x.addLegendBox(M.VerticalLegendBox,x.uiScale).setPosition({y:50,x:m({x:y.chart.pixelScale.x.getCellSize()-y.chart.getPadding().right,y:0},y.chart.pixelScale,x.uiScale).x}).setOrigin(d.RightCenter);p.forEach((e=>k.add(e.series))),P.setNibInteractionScaleByDragging(!1).setNibInteractionScaleByWheeling(!1).setAxisInteractionZoomByWheeling(!1);const w=(e,t)=>{const n=P.getInterval(),a=n.end-n.start,s=a+.1*Math.sign(t.deltaY)*Math.abs(a);P.setInterval(n.end-s,n.end,!1,!1),t.preventDefault(),t.stopPropagation()};P.onAxisInteractionAreaMouseWheel(w),p.forEach((e=>e.chart.onSeriesBackgroundMouseWheel(w))),x.addUIElement().setText("Reset").setPosition({x:0,y:0}).setOrigin(d.LeftBottom).setMargin({left:4,bottom:4}).setDraggingMode(u.notDraggable).onMouseClick((e=>{const t=p[0].series.getXMax();P.setInterval(t-3e4,t,!1,!1),p.forEach((e=>e.axisY.fit()))}));const T=[{length:400*Math.PI,func:e=>Math.sin(e/200)},{length:400*Math.PI,func:e=>Math.cos(e/200)},{length:800*Math.PI,func:e=>Math.cos(e/400)+Math.sin(e/200)},{length:800*Math.PI,func:e=>Math.sin(e/100)+Math.cos(e/400)},{length:800*Math.PI,func:e=>Math.sin(e/200)*Math.cos(e/400)},{length:1800*Math.PI,func:e=>Math.cos(e/900)},{length:3200*Math.PI,func:e=>Math.sin(e/1600)},{length:2600*Math.PI,func:e=>Math.sin(e/400)*Math.cos(e/1300)}];Promise.all(T.map((e=>f().setStart(0).setEnd(e.length).setStep(1).setSamplingFunction(e.func).generate().toPromise().then((e=>e.map((e=>e.y))))))).then((e=>{let t=0,n=0;const a=()=>{const s=window.performance.now(),i=s-t,o=[];for(let a=0;a<p.length;a++){const s=e[a%(e.length-1)],r=[];for(let e=0;e<60;e++){const a={x:t+(e+1)/60*i,y:s[(n+e)%(s.length-1)]};r.push(a)}o[a]=r}p.forEach(((e,t)=>e.series.add(o[t]))),t=s,n+=60,requestAnimationFrame(a)};a()}));let C=window.performance.now(),A=0,b=0;const v=I.chart.getTitle(),B=()=>{A++;const e=window.performance.now();b=1e3/((e-C)/A),requestAnimationFrame(B),I.chart.setTitle(`${v} (FPS: ${b.toFixed(1)})`)};requestAnimationFrame(B),setInterval((()=>{C=window.performance.now(),A=0}),5e3)}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);